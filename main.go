package main

import (
	"fmt"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/docker"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/semver"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/storage"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/tags"
	"strings"
)

func tagIsStored(tag tags.Tag) bool {
	retrievedTag, err := storage.GetTag(tag)
	if err != nil {
		if !strings.Contains(err.Error(), "no documents in result") {
			panic(err)
		}
	}
	if retrievedTag.Hash == "" {
		return false
	}
	fmt.Printf("[*] Tag %s with hash %s already stored. Moving on.\n", retrievedTag.Name, retrievedTag.Hash)
	return true
}

func storeTag(tag tags.Tag) {
	storageErr := storage.CreateTag(tag)
	if storageErr != nil {
		panic(storageErr)
	}
	fmt.Printf("[*] Tag %s with hash %s stored successfully.\n", tag.Name, tag.Hash)
}

func updateVulnerableTagsWithHashes(vulnerableTags []tags.Tag) []tags.Tag {
	for _, vulnerableTag := range vulnerableTags {
		if tagIsStored(vulnerableTag) {
			continue
		}
		docker.ExecuteRunCommand(&vulnerableTag)
		if vulnerableTag.ExitError != nil {
			panic(vulnerableTag.ExitError)
		}
		fmt.Printf("[*] Found hash %s for vulnerable version %s\n", vulnerableTag.Hash, vulnerableTag.Name)
		storeTag(vulnerableTag)
		docker.ExecuteImageRemove(&vulnerableTag)
	}
	return vulnerableTags
}

func main() {
	allTagNames := tags.GetAllTags()
	vulnerableTags := semver.GetVulnerableTags(allTagNames)
	fmt.Printf("\n[*] Found a total of %d tags for GitLab EE and CE editions, %d of which match the vulnerable semver constraints provided.\n", len(allTagNames), len(vulnerableTags))
	vulnerableTags = updateVulnerableTagsWithHashes(vulnerableTags)
	fmt.Println("[*] Vulnerable hashes:")
	results, err := storage.GetDistinctHashes()
	if err != nil {
		panic(err)
	}
	for _, result := range results {
		fmt.Printf("%s\n", result)
	}
}
