package main

import (
	"fmt"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/semver"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/tags"
)

var VulnerableConstraints = []string{">=11.9, <13.8.8", ">=13.9, <13.9.6", ">=13.10, <13.10.3"}
var IgnoredTags = NonSemverAliasedTags{List: []string{"latest", "nightly", "rc"}}

type NonSemverAliasedTags struct {
	List []string
}

func (n *NonSemverAliasedTags) Contains(tag tags.Tag) bool {
	for _,  t := range n.List {
		if t == tag.Name {
			return true
		}
	}
	return false
}


func getAllTags() []tags.Tag {
	var allTagNames []tags.Tag
	ceTags := tags.GetDockerTags(tags.Tag{Edition: tags.CE})
	eeTags := tags.GetDockerTags(tags.Tag{Edition: tags.EE})
	for _, t := range ceTags {
		allTagNames = append(allTagNames, t)
	}
	for _, t := range eeTags {
		allTagNames = append(allTagNames, t)
	}
	return allTagNames
}

func getVulnerableTags(allTagNames []tags.Tag) []tags.Tag {
	var allVulnerableTagNames []tags.Tag
	for _, t := range allTagNames {
		if IgnoredTags.Contains(t) {
			continue
		}
		isVulnerable, err := semver.VersionIsInRange(VulnerableConstraints, t.Name)
		if err != nil {
			fmt.Printf("[!] Tag %s caused:\n", t)
			panic(err)
		}
		if isVulnerable {
			allVulnerableTagNames = append(allVulnerableTagNames, t)
		}
	}
	return allVulnerableTagNames
}

func main() {
	allTagNames := getAllTags()
	vulnerableTagNames := getVulnerableTags(allTagNames)
	fmt.Printf("\n[*] Found a total of %d tags for GitLab EE and CE editions, %d of which match the vulnerable semver constraints provided.", len(allTagNames), len(vulnerableTagNames))

}
