package main

import (
	"fmt"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/docker"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/io"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/semver"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/tags"
	"strings"
	"time"
)

var vulnerableConstraints = []string{">=11.9, <13.8.8", ">=13.9, <13.9.6", ">=13.10, <13.10.3"}
var ignoredTags = []string{"latest", "nightly", "rc"}
var fileName = fmt.Sprintf("./cve-2021-22205-hashes-%s.txt", time.Now().Format("2006-01-02-T15:04:05"))

func getAllTags() []tags.Tag {
	var allTags []tags.Tag
	ceTags := tags.GetDockerTags("gitlab/gitlab-ce")
	eeTags := tags.GetDockerTags("gitlab/gitlab-ee")
	allTags = append(allTags, ceTags...)
	allTags = append(allTags, eeTags...)
	return allTags
}

func hasIgnoredTag(tag tags.Tag) bool {
	for _, it := range ignoredTags {
		if strings.Split(tag.Name, ":")[1] == it {
			return true
		}
	}
	return false
}

func getVulnerableTags(allTags []tags.Tag) []tags.Tag {
	var allVulnerableTags []tags.Tag
	for _, t := range allTags {
		if hasIgnoredTag(t) {
			continue
		}
		isVulnerable, err := semver.VersionIsInRange(vulnerableConstraints, t.Name)
		if err != nil {
			fmt.Printf("[!] Tag %s caused:\n", t)
			panic(err)
		}
		if isVulnerable {
			allVulnerableTags = append(allVulnerableTags, t)
		}
	}
	return allVulnerableTags
}

func updateVulnerableTagsWithHashes(vulnerableTags []tags.Tag) []tags.Tag {
	for _, vulnerableTag := range vulnerableTags {
		docker.ExecuteRunCommand(&vulnerableTag)
		if vulnerableTag.ExitError != nil {
			panic(vulnerableTag.ExitError)
		}
		fmt.Printf("[*] Found hash %s for vulnerable version %s\n", vulnerableTag.Hash, vulnerableTag.Name)
		err := io.WriteUniqueHashToFile(vulnerableTag.Hash, fileName)
		if err != nil {
			panic(err)
		}
		docker.ExecuteImageRemove(&vulnerableTag)
	}
	return vulnerableTags
}

func main() {
	allTagNames := getAllTags()
	vulnerableTags := getVulnerableTags(allTagNames)
	fmt.Printf("\n[*] Found a total of %d tags for GitLab EE and CE editions, %d of which match the vulnerable semver constraints provided.\n", len(allTagNames), len(vulnerableTags))
	vulnerableTags = updateVulnerableTagsWithHashes(vulnerableTags)
	fmt.Println("[*] Vulnerable hashes:")
	for _, vt := range vulnerableTags {
		fmt.Printf("%s\n", vt.Hash)
	}
}
