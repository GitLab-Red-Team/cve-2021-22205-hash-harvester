package io_test

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/io"
	"os"
	"testing"
)

type ioTestSuite struct {
	suite.Suite
	FileExistsPreWrite       bool
	FileExistsPreWriteError  error
	FileExistsPostWrite      bool
	FileExistsPostWriteError error
	WriteFileError1          error
	WriteFileError2          error
	FileName                 string
	ActualFileContent        []byte
	FileContentError         error
	ExpectedFileContent1     string
	ExpectedFileContent2     string
}

func (suite *ioTestSuite) SetupTest() {
	suite.FileName = "./test-file.txt"
	suite.FileExistsPreWrite, suite.FileExistsPreWriteError = io.Exists(suite.FileName)
	suite.ExpectedFileContent1 = "some_hash_value\n"
	suite.ExpectedFileContent2 = "another_hash_value\n"
	suite.WriteFileError1 = io.WriteHashToFile(suite.ExpectedFileContent1, suite.FileName)
	suite.WriteFileError2 = io.WriteHashToFile(suite.ExpectedFileContent2, suite.FileName)
	suite.ActualFileContent, suite.FileContentError = os.ReadFile(suite.FileName)
	suite.FileExistsPostWrite, suite.FileExistsPostWriteError = io.Exists(suite.FileName)
}

func (suite *ioTestSuite) TearDownTest() {
	_ = os.Remove(suite.FileName)
}

func (suite *ioTestSuite) TestExistsFuncReturnsFalseForMissingFile() {
	assert.False(suite.T(), suite.FileExistsPreWrite)
}

func (suite *ioTestSuite) TestExistsFuncReturnsTrueForCreatedFile() {
	assert.True(suite.T(), suite.FileExistsPostWrite)
}

func (suite *ioTestSuite) TestWriteHashToFile() {
	assert.Nil(suite.T(), suite.WriteFileError1)
	assert.Nil(suite.T(), suite.WriteFileError2)
}

func (suite *ioTestSuite) TestFileContentIsPresent() {
	assert.Equal(suite.T(),
		fmt.Sprintf("%s%s", suite.ExpectedFileContent1, suite.ExpectedFileContent2),
		string(suite.ActualFileContent))
}

func TestIoTestSuite(t *testing.T) {
	suite.Run(t, new(ioTestSuite))
}
