package io_test

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/io"
	"os"
	"testing"
)

type ioTestSuite struct {
	suite.Suite
	FileExistsPreWrite       bool
	FileExistsPreWriteError  error
	FileExistsPostWrite      bool
	FileExistsPostWriteError error
	WriteFileError           error
	FileName                 string
	ActualFileContent        []byte
	FileContentError         error
	ExpectedFileContent      string
}

func (suite *ioTestSuite) SetupTest() {
	suite.FileName = "./test-file.txt"
	defer func() {
		_ = os.Remove(suite.FileName)
	}()
	suite.FileExistsPreWrite, suite.FileExistsPreWriteError = io.Exists(suite.FileName)
	suite.ExpectedFileContent = "some_hash_value"
	suite.WriteFileError = io.WriteHashToFile(suite.ExpectedFileContent, suite.FileName)
	suite.ActualFileContent, suite.FileContentError = os.ReadFile(suite.FileName)
	suite.FileExistsPostWrite, suite.FileExistsPostWriteError = io.Exists(suite.FileName)
}

func (suite *ioTestSuite) TestExistsFuncReturnsFalseForMissingFile() {
	assert.False(suite.T(), suite.FileExistsPreWrite)
}

func (suite *ioTestSuite) TestExistsFuncReturnsTrueForCreatedFile() {
	assert.True(suite.T(), suite.FileExistsPostWrite)
}

func (suite *ioTestSuite) TestWriteHashToFileIsTrue() {
	assert.Nil(suite.T(), suite.WriteFileError)
}

func (suite *ioTestSuite) TestFileContentIsPresent() {
	assert.Equal(suite.T(), string(suite.ActualFileContent), string(suite.ExpectedFileContent))
}

func TestIoTestSuite(t *testing.T) {
	suite.Run(t, new(ioTestSuite))
}
