package io

import (
	"fmt"
	"os"
	"strings"
)

type VulnerableVersionHash struct {
	Hash     string
	Versions []string
}

type EnvironmentVariableLoader func(filenames ...string) error
type GetEnv func(key string) string

func hashExistsInFile(fileName string, hash string) (bool, error) {
	hashes, err := os.ReadFile(fileName)
	if err != nil {
		return false, err
	}
	if strings.Contains(string(hashes), hash) {
		return true, nil
	}
	return false, nil
}

func GetMongodbURI(envLoader EnvironmentVariableLoader, getEnv GetEnv) string {
	if err := envLoader(); err != nil {
		fmt.Println("No .env file found!")
	}
	return getEnv("MONGODB_URI")
}

func WriteUniqueHashToFile(hash string, fileName string) error {
	f, err := os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		return err
	}
	defer func(f *os.File) {
		_ = f.Close()
	}(f)
	var exists bool
	if exists, err = hashExistsInFile(fileName, hash); err != nil {
		return err
	}
	if exists {
		fmt.Printf("[*] Hash %s is already recorded.  Skipping.\n", hash)
		return nil
	}
	if _, err = f.WriteString(fmt.Sprintf("%s\n", hash)); err != nil {
		return err
	}
	return nil
}
