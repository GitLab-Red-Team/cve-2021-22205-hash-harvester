package docker_test

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/docker"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/tags"
	"strings"
	"testing"
)

// Test Docker Run Commands
type DockerRunTestSuite struct {
	suite.Suite
	Tag                      tags.Tag
	ActualHash               string
	ActualHashNoStdOut       string
	DockerRunCmdTag          tags.Tag
	ErroneousDockerRunCmdTag tags.Tag
}

func (suite *DockerRunTestSuite) SetupTest() {
	suite.Tag = tags.Tag{Name: "gitlab/gitlab-ce:latest"}
	suite.ActualHash = docker.GetHashFromStdOut("alerts_settings\napplication-1832611738f1e31dd00a8293bbf90fce9811b3eea5b21798a63890dbc51769c8.css\napplication-1832611738f1e31dd00a8293bbf90fce9811b3eea5b21798a63890dbc51769c8.css.gz\napplication_dark-2d787b1ff63b1fc7e3e61e1ca4423bf9d5a3f5a8fdbd79595094203fd0cb12b3.css\napplication_dark-2d787b1ff63b1fc7e3e61e1ca4423bf9d5a3f5a8fdbd79595094203fd0cb12b3.css.gz\napplication_utilities-bc027c4ca9c192ebc63aebf7c1217b71b6606d34fa3fdd229f819d180c660dba.css\napplication_utilities-bc027c4ca9c192ebc63aebf7c1217b71b6606d34fa3fdd229f819d180c660dba.css.gz\napplication_utilities_dark-55811f2b43035ece97ec1012ba7177fc972a85d2e2abc5bee7a2e9e56bf6b2ac.css\napplication_utilities_dark-55811f2b43035ece97ec1012ba7177fc972a85d2e2abc5bee7a2e9e56bf6b2ac.css.gz\nauth_buttons")
	suite.ActualHashNoStdOut = docker.GetHashFromStdOut("")
	suite.ActualHashNoStdOut = docker.GetHashFromStdOut("")
	suite.DockerRunCmdTag = <-docker.ExecuteRunCommand(suite.Tag)
	suite.ErroneousDockerRunCmdTag = <-docker.ExecuteRunCommand(tags.Tag{Name: "gitlab/gitlab-ce:non-existent"})
}

func (suite *DockerRunTestSuite) TestGetHashFromStdOut() {
	assert.Equal(suite.T(),
		"1832611738f1e31dd00a8293bbf90fce9811b3eea5b21798a63890dbc51769c8",
		suite.ActualHash)
	assert.Equal(suite.T(), "", suite.ActualHashNoStdOut)
}

func (suite *DockerRunTestSuite) TestExecuteRun() {
	assert.True(suite.T(), suite.DockerRunCmdTag.ExitError == nil)
	assert.True(suite.T(), len(suite.DockerRunCmdTag.CmdResult) > 0)
}

func (suite *DockerRunTestSuite) TestExecuteRunWithError() {
	assert.Equal(suite.T(), "Unable to find image 'gitlab/gitlab-ce:non-existent' locally\ndocker: Error response from daemon: manifest for gitlab/gitlab-ce:non-existent not found: manifest unknown: manifest unknown.\nSee 'docker run --help'.\n",
		fmt.Sprintf("%s", suite.ErroneousDockerRunCmdTag.ExitError.Stderr))
	assert.True(suite.T(), len(suite.ErroneousDockerRunCmdTag.CmdResult) == 0)
}

// END Test Docker Run Commands

// Test Docker Image Removal
type DockerImageRmTestSuite struct {
	suite.Suite
	Tag                     tags.Tag
	ImageRemoveTag          tags.Tag
	ErroneousImageRemoveTag tags.Tag
}

func (suite *DockerImageRmTestSuite) SetupTest() {
	suite.Tag = tags.Tag{Name: "gitlab/gitlab-ce:latest"}
	_ = <-docker.ExecuteRunCommand(suite.Tag)
	suite.ImageRemoveTag = <-docker.ExecuteImageRemove(suite.Tag)
	suite.ErroneousImageRemoveTag = <-docker.ExecuteImageRemove(tags.Tag{Name: "i-donot-exist"})
}

func (suite *DockerImageRmTestSuite) TestImageRemove() {
	assert.True(suite.T(), strings.Contains(string(suite.ImageRemoveTag.CmdResult), "Deleted:"))
	assert.True(suite.T(), suite.ImageRemoveTag.ExitError == nil)
}

func (suite *DockerImageRmTestSuite) TestImageRemoveWithError() {
	assert.True(suite.T(), string(suite.ErroneousImageRemoveTag.CmdResult) == "")
	assert.True(suite.T(), suite.ErroneousImageRemoveTag.ExitError == nil)
}

// END Test Docker Image Removal

func TestDockerTestSuite(t *testing.T) {
	suite.Run(t, new(DockerRunTestSuite))
}

func TestDockerImageRmTestSuite(t *testing.T) {
	suite.Run(t, new(DockerImageRmTestSuite))
}
