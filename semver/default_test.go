package semver_test

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"gitlab.com/gitlab-red-team/cve-2021-22205-hash-harvester/semver"
	"gitlab.com/gitlab-red-team/cve-2021-22205-hash-harvester/tags"
	"testing"
)

type SemVerTestSuite struct {
	suite.Suite
	Constraints    []string
	ExampleTags    []tags.Tag
	VulnerableTags []tags.Tag
}

func (suite *SemVerTestSuite) SetupTest() {
	suite.Constraints = []string{">=11.9, <13.8.8", ">=13.9, <13.9.6", ">=13.10, <13.10.3"}
	suite.ExampleTags = []tags.Tag{
		{Name: "gitlab/gitlab-ce:11.10.6-ce.0"},
		{Name: "gitlab/gitlab-ce:11.8.1-ee.1"},
		{Name: "gitlab/gitlab-ce:13.8.9-ee.1"},
	}
	suite.VulnerableTags = semver.GetVulnerableTags(suite.ExampleTags)
}

func (suite *SemVerTestSuite) TestVersionIsInRange() {
	isInRange, e := semver.VersionIsInRange(suite.Constraints, "gitlab/gitlab-ce:13.9.5-rc.1")
	assert.True(suite.T(), isInRange)
	assert.True(suite.T(), e == nil)
}

func (suite *SemVerTestSuite) TestVersionIsNotInRange() {
	isInRange, e := semver.VersionIsInRange(suite.Constraints, "gitlab/gitlab-ee:13.10.4-rc.0")
	assert.False(suite.T(), isInRange)
	assert.True(suite.T(), e == nil)
}

func (suite *SemVerTestSuite) TestErrorOccursWithInvalidRangeConstraint() {
	badConstraints := []string{"!11.10.0"}
	isInRange, e := semver.VersionIsInRange(badConstraints, "")
	assert.False(suite.T(), isInRange)
	assert.True(suite.T(), e.Error() == "improper constraint: !11.10.0")
}

func (suite *SemVerTestSuite) TestErrorOccursWithInvalidVersion() {
	isInRange, e := semver.VersionIsInRange(suite.Constraints, "-11")
	assert.False(suite.T(), isInRange)
	assert.True(suite.T(), e.Error() == "invalid image or version detected: -11")
}

func (suite *SemVerTestSuite) TestHandlesReleaseCandidateNotation() {
	isInRange, e := semver.VersionIsInRange(suite.Constraints, "gitlab/gitlab-ce:13.9.1-rc11.ce.0")
	assert.True(suite.T(), isInRange)
	assert.True(suite.T(), e == nil)
}

func (suite *SemVerTestSuite) TestHandlesEditionNotation() {
	isInRange, e := semver.VersionIsInRange(suite.Constraints, "gitlab/gitlab-ee:13.10.4-ee.0")
	assert.False(suite.T(), isInRange)
	assert.True(suite.T(), e == nil)
}

func (suite *SemVerTestSuite) TestGetRawVersionNumber() {
	version, err := semver.GetRawVersion("gitlab/gitlab-ce:13.9.1-rc11.ce.0")
	assert.True(suite.T(), version == "13.9.1")
	assert.True(suite.T(), err == nil)
	version, err = semver.GetRawVersion("gitlab/gitlab-ee:latest")
	assert.True(suite.T(), version == "latest")
	assert.True(suite.T(), err == nil)
	version, err = semver.GetRawVersion("-21")
	assert.True(suite.T(), version == "")
	assert.True(suite.T(), err.Error() == "invalid image or version detected: -21")
}

func (suite *SemVerTestSuite) TestGetVulnerableTags() {
	assert.Equal(suite.T(), len(suite.VulnerableTags), 1)
	assert.Equal(suite.T(), suite.VulnerableTags[0], suite.ExampleTags[0])
	assert.NotContains(suite.T(), suite.VulnerableTags, suite.ExampleTags[2])
}

func TestSemVerTestSuite(t *testing.T) {
	suite.Run(t, new(SemVerTestSuite))
}
