package semver

import (
	"errors"
	"fmt"
	"github.com/Masterminds/semver"
	"strings"
)

func getTypedConstraints(constraintStrings []string) ([]*semver.Constraints, error) {
	var constraints []*semver.Constraints
	for _, s := range constraintStrings {
		constraint, err := semver.NewConstraint(s)
		if err != nil {
			return nil, err
		}
		constraints = append(constraints, constraint)
	}
	return constraints, nil
}

func GetRawVersion(imageAndTag string) (string, error) {
	imageAndVersion := strings.Split(imageAndTag, ":")
	if len(imageAndVersion) == 1 {
		return "", errors.New(fmt.Sprintf("Invalid image or version detected: %s", imageAndTag))
	}
	versionAndDetails := strings.Split(imageAndVersion[1], "-")
	return versionAndDetails[0], nil
}

func VersionIsInRange(constraints []string, imageAndTag string) (bool, error) {
	typedConstraints, typedConstraintsErr := getTypedConstraints(constraints)
	if typedConstraintsErr != nil {
		return false, typedConstraintsErr
	}
	rawVersion, err := GetRawVersion(imageAndTag)
	if err != nil {
		return false, err
	}
	typedVersion, newVersionErr := semver.NewVersion(rawVersion)
	if newVersionErr != nil {
		return false, newVersionErr
	}
	for _, c := range typedConstraints {
		if c.Check(typedVersion) {
			return true, nil
		}
	}
	return false, nil
}
