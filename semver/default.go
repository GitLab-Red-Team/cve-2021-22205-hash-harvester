package semver

import (
	"fmt"
	"github.com/Masterminds/semver"
	"gitlab.com/gitlab-red-team/cve-2021-22205-hash-harvester/tags"
	"strings"
)

var vulnerableConstraints = []string{">=11.9, <13.8.8", ">=13.9, <13.9.6", ">=13.10, <13.10.3"}

var ignoredTags = []string{"latest", "nightly", "rc"}

func hasIgnoredTag(tag tags.Tag) bool {
	for _, it := range ignoredTags {
		if strings.Split(tag.Name, ":")[1] == it {
			return true
		}
	}
	return false
}

func getTypedConstraints(constraintStrings []string) ([]*semver.Constraints, error) {
	var constraints []*semver.Constraints
	for _, s := range constraintStrings {
		constraint, err := semver.NewConstraint(s)
		if err != nil {
			return nil, err
		}
		constraints = append(constraints, constraint)
	}
	return constraints, nil
}

func GetVulnerableTags(allTags []tags.Tag) []tags.Tag {
	var allVulnerableTags []tags.Tag
	for _, t := range allTags {
		if hasIgnoredTag(t) {
			continue
		}
		isVulnerable, err := VersionIsInRange(vulnerableConstraints, t.Name)
		if err != nil {
			fmt.Printf("[!] Tag %s caused:\n", t)
			panic(err)
		}
		if isVulnerable {
			allVulnerableTags = append(allVulnerableTags, t)
		}
	}
	return allVulnerableTags
}

func GetRawVersion(imageAndTag string) (string, error) {
	imageAndVersion := strings.Split(imageAndTag, ":")
	if len(imageAndVersion) == 1 {
		return "", fmt.Errorf("invalid image or version detected: %s", imageAndTag)
	}
	versionAndDetails := strings.Split(imageAndVersion[1], "-")
	return versionAndDetails[0], nil
}

func VersionIsInRange(constraints []string, imageAndTag string) (bool, error) {
	typedConstraints, typedConstraintsErr := getTypedConstraints(constraints)
	if typedConstraintsErr != nil {
		return false, typedConstraintsErr
	}
	rawVersion, err := GetRawVersion(imageAndTag)
	if err != nil {
		return false, err
	}
	typedVersion, newVersionErr := semver.NewVersion(rawVersion)
	if newVersionErr != nil {
		return false, newVersionErr
	}
	for _, c := range typedConstraints {
		if c.Check(typedVersion) {
			return true, nil
		}
	}
	return false, nil
}
