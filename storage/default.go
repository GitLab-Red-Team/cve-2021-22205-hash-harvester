package storage

import (
	"context"
	"github.com/joho/godotenv"
	"gitlab.com/gitlab-red-team/private-research/cve-2021-22205-hash-generator/tags"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"os"
	"sync"
)

var mongoOnce sync.Once
var clientInstance *mongo.Client
var clientInstanceError error
var mongoURI string

const (
	DbName         = "cve_2021_22205"
	CollectionName = "tags"
)

func getMongoClient() (*mongo.Client, error) {
	mongoOnce.Do(func() {
		mongoURI = getMongodbURI()
		clientOptions := options.Client().ApplyURI(mongoURI)
		client, err := mongo.Connect(context.TODO(), clientOptions)
		if err != nil {
			clientInstanceError = err
		}
		err = client.Ping(context.TODO(), nil)
		if err != nil {
			clientInstanceError = err
		}
		clientInstance = client
	})
	return clientInstance, clientInstanceError
}

func getMongodbURI() string {
	if err := godotenv.Load(); err != nil {
		panic("[!] No .env file found!")
	}
	return os.Getenv("MONGODB_URI")
}

func GetTag(tag tags.Tag) (tags.Tag, error) {
	result := tags.Tag{}
	filter := bson.M{"name": tag.Name}
	client, err := getMongoClient()
	if err != nil {
		return result, err
	}
	collection := client.Database(DbName).Collection(CollectionName)
	err = collection.FindOne(context.TODO(), filter).Decode(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func CreateTag(tag tags.Tag) error {
	client, err := getMongoClient()
	if err != nil {
		return err
	}
	collection := client.Database(DbName).Collection(CollectionName)
	_, err = collection.InsertOne(context.TODO(), tag)
	if err != nil {
		return err
	}
	return nil
}
